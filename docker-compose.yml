version: "3.5"
services:

  spadev:
    container_name: spadev
    build:
      context: .
      dockerfile: ./Dockerfile
      target: spadev
    image: 
    working_dir: /app
    volumes:
      - ./spa:/app
    networks:
      - myappyo
    command: "yarn serve"
    ports:
      - 8080:8080
    restart: unless-stopped
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:spa

  apidev:
    container_name: apidev
    build:
      context: .
      dockerfile: ./Dockerfile
      target: apidev
    working_dir: /app
    volumes:
      - ./api:/app
    networks:
      - myappyo
    command: "php artisan serve --host=0.0.0.0 --port=8000"
    ports:
      - 8000:8000
    restart: unless-stopped
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:api

  mysql:
    container_name: mysql
    image: mariadb:10.5.5
    env_file:
      - .env.local
    environment:
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD}
      - MYSQL_DATABASE=${DATABASE_NAME}
      - MYSQL_USER=${DATABASE_USER}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}
    ports:
      - "3306:3306"
    networks:
      - myappyo
    volumes:
      - mysqldata:/var/lib/mysql

  redis:
    container_name: redis
    image: redis:5.0
    ports:
      - 6379:6379
    networks:
      - myappyo

  php:
    container_name: php
    depends_on:
      - mysql 
      - redis
    build:
      context: .
      dockerfile: ./Dockerfile
      target: app
    env_file:
      - .env.local
    environment:
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - REDIS_HOST=${REDIS_HOST}
      - AWS_S3_ACCESS_ID=${AWS_S3_ACCESS_ID}
      - AWS_S3_ACCESS_SECRET=${AWS_S3_ACCESS_SECRET}
    ports:
      - 9000:9000
    volumes:
      - ./api:/var/www/html/
      - ./storage/framework/cache/:/var/www/html/storage/framework/cache/
      - ./storage/logs/:/var/www/html/storage/logs/
    networks:
      - myappyo
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:php

  nginx:
    container_name: nginx
    depends_on:
      - apidev
    build:
      args:
        UPSTREAM: fargate
      context: .
      dockerfile: ./Dockerfile
      target: web
    # working_dir: /var/www/html
    # volumes:
    #   - ./public/:/var/www/html/public/
    networks:
      - myappyo
    # command: "php artisan serve --host=0.0.0.0 --port=8000"
    ports:
      - 80:80
    # restart: unless-stopped
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:nginx

volumes:
  mysqldata: {}

networks:
  myappyo:
    driver: bridge
